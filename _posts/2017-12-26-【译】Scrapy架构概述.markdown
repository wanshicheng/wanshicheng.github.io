---
layout: post
author: 万仕诚
title: '【译】Scrapy架构概述'
date: 2017-12-26
cover: 'http://file.wanshicheng.org/assets/img/postcover.jpg'
categories: python
tags: scrapy python
---

原文链接：[Architecture overview](https://doc.scrapy.org/en/1.4/topics/architecture.html)

## 数据流
![](http://file.wanshicheng.org/assets/imgscrapy_architecture.png)

Scrapy 中的数据流由执行引擎控制，并且像这样运行：

1. 引擎从 Spider 中找到第一个要爬取的请求；
2. 引擎调度在调度器（Scheduler）中请求并要求下一个请求进行爬取；
3. 调度器返回下一个请求给引擎；
4. 引擎通过下载器中间件（Downloader Middleware）发送请求给下载器（Downloader）（参见 process_request）；
5. 一旦页面下载完毕，下载器(用该页面)生成一个Response，并将其通过下载中间件发送给引擎。
6. 引擎从下载器中接收到响应并通过Spider中间件发送给Spider处理（参见 process_spider_output()）。
7. Spider处理响应并返回爬取到的 item 及(跟进的)新的请求给引擎（参见 process_spider_output()）。
8. 引擎将处理过的 item 发送给Item Pipeline，将处理过的请求发送给给调度器，并要求下一个合适的请求进行爬取。
9. (从第一步)重复直到调度器中没有更多的请求。



## 组件
### Scrapy Engine
引擎负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。 详细内容查看下面的数据流(Data Flow)部分。

### 调度器(Scheduler)
调度器从引擎接受请求并将他们入队，以便之后引擎请求他们时提供给引擎。

### 下载器(Downloader)
下载器负责获取 web 页面并提供给引擎，而引擎由将它们提供给 spider。

### Spiders
Spider 是 Scrapy用户编写用于分析响应并提取 item （亦称 scraped items）。更多内容请看 Spiders 。

### Item Pipeline
Item Pipeline 负责处理被 spider 提取出来的item。典型的任务包括清理、验证及持久化(例如存取到数据库中)。 更多内容查看 Item Pipeline 。

### 下载器中间件(Downloader middlewares)
下载器中间件是在引擎及下载器之间的特定钩子(specific hook)，处理Downloader传递给引擎的response。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。

如果您需要执行以下操作，请使用下载器中间件：

- 处理一个将要发送到下载器之前的请求（即在 scrapy 将请求发送到网站之前）；
- 在将其传递到 spider 之前修改接收到的响应；
- 发送一个新的请求而不是传递接收到的响应；
- 在不获取 web 页面的情况下发送响应给 spider；
- 隐性地获取一些请求

更多内容请看 下载器中间件(Downloader Middleware) 。

### Spider中间件(Spider middlewares)
Spider中间件是在引擎及Spider之间的特定钩子(specific hook)，处理spider的输入(response)和输出(items及requests)。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。

如果您需要执行以下操作，请使用 Spider 中间件：

- 后处理 Spider 回调的输出——改变/增加加/删除请求或 item;
- 后处理 start_request;
- 处理 spider 异常；
- 调用errback，而不是根据响应内容对某些请求进行回调。

更多内容请看 Spider 中间件。

## 事件驱动网络

Scrapy基于事件驱动网络框架 Twisted 编写。因此，Scrapy基于并发性考虑由非阻塞(即异步)的实现。

关于异步编程及Twisted更多的内容请查看下列链接:

- [Introduction to Deferreds in Twisted](https://twistedmatrix.com/documents/current/core/howto/defer-intro.html)
- [Twisted - hello, asynchronous programming](http://jessenoller.com/2009/02/11/twisted-hello-asynchronous-programming/)
- [Twisted Introduction - Krondo](http://krondo.com/an-introduction-to-asynchronous-programming-and-twisted/)

